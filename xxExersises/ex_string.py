# 02. Напишите программу на Python для подсчета количества символов (частоты символов) в строке.
#        Пример строки: google.com '
#        Ожидаемый результат: {'o': 3, 'g': 2, '.': 1, 'e': 1, 'l': 1, 'm': 1, 'c': 1}
def word_container(line: str):
    rez = dict()
    for ch in line.lower():
        if ch not in rez:
            rez[ch] = 1
        else:
            rez[ch] += 1
    return rez


# 03.  Напишите программу на Python, чтобы получить строку из первых 2 и последних 2 символов из заданной строки.
#       Если длина строки меньше 2, верните вместо пустой строки
def string_code(line: str):
    if len(line) > 1:
        return f'{line[:2]}{line[-2:]}'
    else:
        return None


# 05. Напишите программу на Python, чтобы получить одну строку из двух заданных строк, разделенных пробелом,
#         и поменять местами первые два символа каждой строки.

def strings_mesh(line: str):
    words = [word.strip() for word in line.strip().split(' ') if len(word.strip()) > 1]
    if len(words) == 2:
        return f'{words[1][:2]}{words[0][2:]} {words[0][:2]}{words[1][2:]}'
    else:
        return None


# 06. Напишите программу на Python для добавления 'ing' в конец заданной строки (длина должна быть не менее 3).
#         Если данная строка уже заканчивается на «ing», вместо этого добавьте «ly».
#         Если длина строки данной строки меньше 3, оставьте ее без изменений
def suffix_add(line: str):
    add = ''
    if len(line) > 2:
        add = 'ing'
        if line[-3:] == 'ing':
            add = 'ly'
    return line + add


# 07. найти первое появление подстроки «not» и «bad» из заданной строки,
#       если «not» следует за «плохой», замените всю подстроку «not» ... «плохой» на 'хорошо'.
#       Вернуть полученную строку
def replace_not_bad(line: str):
    if line.find('not') != -1 and line.find('bad') != -1 and line.find('not') < line.find('bad'):
        return line[:line.find('not')] + 'good' + line[line.find('bad') + 3:]
    else:
        return line


# 08.   Напишите функцию Python, которая берет список слов и возвращает длину самого длинного
def longest_word(inp: str):
    words = [word.strip().strip(',') for word in inp.split(' ') if len(word.strip(',').strip()) > 0]
    rez = len(words[0])
    for word in words:
        if len(word) > rez:
            rez = len(word)
    return rez


# 09.   Напишите программу на Python для удаления n- го символа индекса из непустой строки
def remove_index_fromstr(line: str, index: int):
    if index < len(line) - 1:
        return line[:index] + line[index + 1:]
    if index == len(line) - 1:
        return line[:index]
    else:
        return None


# 10.   Напишите программу на Python, чтобы заменить данную строку новой строкой,
#       в которой были изменены первый и последний символы
def fist_last_replacer(line: str, r):
    return f'{r}{line[1:-1]}{r}'


# 11. Напишите программу на Python для удаления символов,
#       которые имеют нечетные значения индекса заданной строки.
def remove_odd_chars(line: str):
    return line[::2]


# 12. Напишите программу на Python для подсчета вхождений каждого слова в данное предложение
def word_count(line: str):
    words = set([word.strip() for word in line.lower().split(' ') if len(word) > 0])
    count = dict()
    for word in words:
        count[word] = line.lower().count(word)
    return count


# 13. Напишите скрипт, который принимает ввод от пользователя и
#       отображает его обратно в верхнем и нижнем регистре
def string_shifter(line: str, is_upper=True):
    if is_upper:
        return line.upper()
    else:
        return line.lower()


# 14.  Напишите программу которая принимает последовательность слов, разделенных запятыми,
#         в качестве входных данных и печатает уникальные слова в отсортированном виде
#         (в алфавитном порядке).
#         Примеры слов: красный, белый, черный, красный, зеленый, черный
#         Ожидаемый результат: черный, зеленый, красный, белый, красный
# def sort_words(words: list):
def sort_words(words: list):
    u_words = [w for w in set(words)]
    u_words.sort()
    return u_words
# print(sort_words(['Red', 'White', 'Black', 'red', 'Green', 'Black']))


# 15. Напишите функцию для создания строки HTML с тегами вокруг слова (ей)
#         Пример функции и результат:
#         add_tags ('i', 'Python') -> '<i> Python </ i>'
#         add_tags ('b', 'Python Tutorial') -> '<b> Python Tutorial </ b>'
def add_tags(ch, string):
    return f'<{ch}> {string} </{ch}>'


# 16 Напишите функцию для вставки строки в середину строки.
#     Пример функции и результат:
#     insert_sting_middle ('[[]] << >>', 'Python') -> [[Python]]
#     insert_sting_middle ('{{}}', 'PHP') -> {{PHP}}
def insert_sting_middle(string: str, insertion: str):
    return f'{string[:len(string)//2]}{insertion}{string[len(string)//2:]}'


# print(insert_sting_middle('{{}}', 'PHP'))
# 17. Напишите функцию, чтобы получить строку, составленную из 4 копий двух последних символов
#       указанной строки (длина должна быть не менее 2).
#       Пример функции и результат:
#       insert_end ('Python') -> onononon
#       insert_end ('exercises') -> eseseses
def insert_end(line: str):
    if len(line) > 2:
        return line[-2:]*4
    else:
        return None


# 18. Напишите функцию, чтобы получить строку, состоящую из первых трех символов указанной строки.
#     Если длина строки меньше 3, верните исходную строку.
#     Пример функции и результат:
#     first_three ('ipy') -> ipy
#     first_three ('python') -> pyt
def first_three(line: str):
    if len(line) < 3:
        return line
    else:
        return line[:3]


# 19. Напишите программу на , чтобы получить последнюю часть строки перед указанным символом.
#     / питон-упражнение
#     / питон
def cut_right(string: str, ch):
    return string[:string.find(ch)]
# print(cut_right('Python-exercises', '-'))


# 20. Напишите функцию, которая переворачивает строку, если ее длина кратна 4.
def quadro_revert(line: str):
    if len(line) % 4 == 0:
        return line[::-1]
    else:
        return None


# 21. Напишите функцию для преобразования заданной строки в верхний регистр,
#       если она содержит как минимум 2 заглавных символа в первых 4 символах.
def upper_by_2(line: str):
    upp = [x for x in line[:4] if x.isupper()]
    if len(upp) > 2:
        return line.upper()
    else:
        return line


# 22. Напишите программу  для лексикографической сортировки строк.


# 23. Напишите программу  для удаления новой строки в Python.
def remove_eol(line: str):
    return ''.join([ch for ch in line if ch != "\n"])


# 24. Напишите программу чтобы проверить, начинается ли строка с указанных символов.
def is_started(line: str, started: str):
    return line.lower().startswith(started.lower())


# 25. Напишите программу  для создания шифрования Цезаря.
#     Примечание. В криптографии шифр Цезаря, также известный как шифр Цезаря, шифр сдвига,
#         код Цезаря или сдвиг Цезаря, является одним из самых простых и широко известных методов шифрования.
#         Это тип шифра замещения, в котором каждая буква в открытом тексте заменяется
#         буквой с фиксированным числом позиций по алфавиту.
#         Например, при сдвиге влево 3 D будет заменен на A, E станет B и так далее.
#         Метод назван в честь Юлия Цезаря, который использовал его в своей личной переписке.


# 26. Напишите программу  для отображения форматированного текста (ширина = 50) в качестве вывода.

# 27. Напишите программу  для удаления существующего отступа из всех строк в данном тексте.

# 28. Напишите программу , чтобы добавить текст префикса ко всем строкам в строке.

# 29. Напишите программу  для установки отступа первой строки.

# 30. Напишите программу  для печати следующих плавающих чисел с точностью до 2 десятичных знаков.

# 31. Напишите программу  для печати следующих плавающих чисел до 2 десятичных знаков со знаком.

# 32. Напишите программу  для печати следующих плавающих чисел без десятичных знаков.

# 33. Напишите программу  для печати следующих целых чисел с нулями слева от указанной ширины.

# 34. Напишите программу , которая будет печатать следующие целые числа с '*' справа от указанной ширины

# 35. Напишите программу для отображения числа с запятой.

# 36. Напишите программу для форматирования числа в процентах.

# 37. Напишите программу для отображения числа слева, справа и по центру ширины 10.

# 38. Напишите программу для подсчета вхождений подстроки в строку.

# 39. Напишите программу для обращения строки.

# 40. Напишите программу для обращения слов в строку.

